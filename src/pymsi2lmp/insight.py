#!/usr/bin/env python
"""
 insight.py - this module provides routines for reading .car and .mdf files
              generated by materials studio (exported as InsightII).
"""
from molecular import Atom, System

# Reads the car and mdf files and returns an array of atoms and bonds.
def get_system(base):
    if base.endswith('.car') or base.endswith('.mdf'):
        base = base[0:-4]
        
    atoms, index, pbc, bounds = read_car(base + '.car')
    read_mdf(base+'.mdf', atoms, index)
    system = System(atoms, base, pbc, bounds)
    system.remap_to_box()
    return system

# Reads the car file from MS.
def read_car(path):
    fid         = open(path, 'r')
    atoms,index = [],{}
    bounds,pbc = None,False
    for line in fid:
        if line.startswith('!DATE'): break
    for line in fid:
        line = line.split()
        if len(line) < 6: continue
        # Read periodic boundary condition line.
        if line[0]=='PBC':
            #        xmin,  xmax,  ymin,  ymax,  zmin,  zmax
            xyz = [ float(x) for x in line[1:4]]
            bounds = (0.0, xyz[0], 0.0, xyz[1], 0.0, xyz[2])
            pbc    = True
        # Read atom line.
        elif len(line)==9:
            atoms.append(Atom())
            atoms[-1].x   = [float(x) for x in line[1:4]]
            atoms[-1].seq = int(line[5])-1
            atoms[-1].ff  = line[6]
            atoms[-1].sym = line[7]
            atom_id = '%s_%s:%s' %(line[4],line[5],line[0])
            index[atom_id] = len(atoms)-1
        else:
            print 'Invalid data line', ' '.join(line)        
    return atoms, index, pbc, bounds

# Gets connectivity from mdf file. 
def read_mdf(path, atoms, index):
    fid = open(path,'r')
    for line in fid:
        if line.startswith('@molecule'): break
    for line in fid:
        line = line.split()
        if len(line) < 12: continue        
        i    = index[line[0]]            
        seq  = line[0][0:line[0].find(':')]
        conn = [s.split('/')[0] for s in line[12::]]
                
        for s in conn:
            if s.find(':') == -1:
                s = seq + ':' + s
            atoms[i].conn.append(index[s])        
        atoms[i].q    = float(line[6])
